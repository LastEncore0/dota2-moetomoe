function StopSound( event )
	local target = event.target
	target:StopSound("Hero_ShadowShaman.Shackles")
end

function IncreaseStackCount( event )
    -- Variables
    local caster = event.caster
    local target = event.target
    local ability = event.ability
    local modifier_name = event.modifier_counter_name
    local dur = ability:GetDuration()

    local modifier = target:FindModifierByName(modifier_name)
    local count = target:GetModifierStackCount(modifier_name, caster)

    -- if the unit does not already have the counter modifier we apply it with a stackcount of 1
    -- else we increase the stack and refresh the counters duration
    if not modifier then
        ability:ApplyDataDrivenModifier(caster, target, modifier_name, {duration=dur})
        target:SetModifierStackCount(modifier_name, caster, 1) 
    else
        target:SetModifierStackCount(modifier_name, caster, count+1)
        modifier:SetDuration(dur, true)
    end
end

function DecreaseStackCount(event)
    --Variables
    local caster = event.caster
    local target = event.target
    local modifier_name = event.modifier_counter_name
    local modifier = target:FindModifierByName(modifier_name)
    local count = target:GetModifierStackCount(modifier_name, caster)

    -- just some saftey checks -just in case
    if modifier then

        -- if there is something to reduce reduce
        -- else just remove the modifier
        if count and count > 1 then
            target:SetModifierStackCount(modifier_name, caster, count-1)
        else
            target:RemoveModifierByName(modifier_name)
        end
    end
end

function modifier_flamefly_mana_cost(keys)
	local mana_cost = keys.ManaCostPerSecond * keys.ShiftRate
end




function conviction_target( keys )
	keys.caster.conviction_target = keys.target
end

function level_judgment( keys )

  local conviction = keys.caster:FindAbilityByName("conviction_datadriven")
	local judgment_level = keys.ability:GetLevel()
	
	if conviction ~= nil and conviction:GetLevel() ~= judgment_level then
		conviction:SetLevel(judgment)
end

end

function level_conviction( keys )

  local judgment = keys.caster:FindAbilityByName("judgment_datadriven")
	local conviction_level = keys.ability:GetLevel()
	
	if judgment ~= nil and judgment:GetLevel() ~= conviction_level then
		judgment:SetLevel(conviction)
end

end

function truered( keys )
	local caster = keys.caster
	local target = keys.target
	local ability = keys.ability

	local ability_level = ability:GetLevel() - 1
	local redtruelevel = ability:GetLevelSpecialValueFor("redtruelevel", ability_level)
	local flamewing = "flamewing"
	local shana_empty_1 = "shana_empty_1"
	local alasterhand = "alasterhand"
	local shanatruered = "shanatruered"
	local ability_name_1 = keys.ability_name_1
	local ability_name_2 = keys.ability_name_2
	local ability_name_3 = keys.ability_name_3
	local ability_name_4 = keys.ability_name_4
	local ability_name_5 = keys.ability_name_5
	local ability_handle_1 = caster:FindAbilityByName(ability_name_1)	
	local ability_handle_2 = caster:FindAbilityByName(ability_name_2)	
	local ability_handle_3 = caster:FindAbilityByName(ability_name_3)	
	local ability_handle_4 = caster:FindAbilityByName(ability_name_4)	
	local ability_handle_5 = caster:FindAbilityByName(ability_name_5)	
	local maxStack = ability:GetLevelSpecialValueFor("shana_truered", (ability:GetLevel() - 1))
	local modifierCount = caster:GetModifierCount()
	local currentStack = 0
	local modifierBuffName = "modifier_truered"
	local modifierStackName = "modifier_truered_count"
	local modifierName
	local one = 1

	-- Always remove the stack modifier
	caster:RemoveModifierByName(modifierStackName) 

	-- Counts the current stacks
	for i = 0, modifierCount do
		modifierName = caster:GetModifierNameByIndex(i)

		if modifierName == modifierBuffName then
			currentStack = currentStack + 1
		end
	end

	-- Remove all the old buff modifiers
	for i = 0, currentStack do
		print("Removing modifiers")
		caster:RemoveModifierByName(modifierBuffName)
	end

	-- Always apply the stack modifier 
	ability:ApplyDataDrivenModifier(caster, caster, modifierStackName, {})

	-- Reapply the maximum number of stacks
	if currentStack >= maxStack then
		caster:SetModifierStackCount(modifierStackName, ability, maxStack)

		-- Apply the new refreshed stack
		for i = 1, maxStack do
			ability:ApplyDataDrivenModifier(caster, caster, modifierBuffName, {})
		end
	else
		-- Increase the number of stacks
		currentStack = currentStack + 1

		caster:SetModifierStackCount(modifierStackName, ability, currentStack)

		-- Apply the new increased stack
		for i = 1, currentStack do
			ability:ApplyDataDrivenModifier(caster, caster, modifierBuffName, {})
		end
	end
	
	if redtruelevel == 1 then
		caster:SwapAbilities(flamewing, shana_empty_1, true, false) 
  elseif redtruelevel == 2 then
		caster:SwapAbilities(alasterhand, keys.ability:GetAbilityName(), true, false) 
	elseif redtruelevel == 3 then
	ability_handle_1:Setlevel(1)
	ability_handle_2:Setlevel(1)
	ability_handle_3:Setlevel(1)
	ability_handle_4:Setlevel(1)
	ability_handle_5:Setlevel(1)
	else
	print(caster:GetUnitName())
end

end

function truered2( keys )
	local caster = keys.caster
	local target = keys.target
	local ability = keys.ability

	local ability_level = ability:GetLevel() - 1
	local redtruelevelup = ability:GetLevelSpecialValueFor("redtruelevelup", ability_level)
	local flyflame = "flyflame"
	local shana_empty_2 = "shana_empty_2"
	local shana_empty_3 = "shana_empty_3"
	local shana_empty_4 = "shana_empty_4"
	local judgment = "judgment"
	local Conviction = "Conviction"
	
	local maxStack = ability:GetLevelSpecialValueFor("shana_truered", (ability:GetLevel() - 1))
	local modifierCount = caster:GetModifierCount()
	local currentStack = 0
	local modifierBuffName = "modifier_truered"
	local modifierStackName = "modifier_truered_count"
	local modifierName

	-- Always remove the stack modifier
	caster:RemoveModifierByName(modifierStackName) 

	-- Counts the current stacks
	for i = 0, modifierCount do
		modifierName = caster:GetModifierNameByIndex(i)

		if modifierName == modifierBuffName then
			currentStack = currentStack + 1
		end
	end

	-- Remove all the old buff modifiers
	for i = 0, currentStack do
		print("Removing modifiers")
		caster:RemoveModifierByName(modifierBuffName)
	end

	-- Always apply the stack modifier 
	ability:ApplyDataDrivenModifier(caster, caster, modifierStackName, {})

	-- Reapply the maximum number of stacks
	if currentStack >= maxStack then
		caster:SetModifierStackCount(modifierStackName, ability, maxStack)

		-- Apply the new refreshed stack
		for i = 1, maxStack do
			ability:ApplyDataDrivenModifier(caster, caster, modifierBuffName, {})
		end
	else
		-- Increase the number of stacks
		currentStack = currentStack + 1

		caster:SetModifierStackCount(modifierStackName, ability, currentStack)

		-- Apply the new increased stack
		for i = 1, currentStack do
			ability:ApplyDataDrivenModifier(caster, caster, modifierBuffName, {})
		end
	end
	
	if redtruelevelup == 1 then
		caster:SwapAbilities(flyflame, shana_empty_2, true, false) 
		caster:SwapAbilities(judgment, shana_empty_3, true, false) 
		caster:SwapAbilities(Conviction, shana_empty_4, true, false) 
end

end

function AssassinateCast( keys )
	local caster = keys.caster
	local target = keys.target
	local ability = keys.ability
	local ability_level = ability:GetLevel() - 1
	local modifier_shrapnel = keys.modifier_shrapnel
	local modifier_target = keys.modifier_target
	local modifier_caster = keys.modifier_caster
	local modifier_cast_check = keys.modifier_cast_check

	-- Parameters
	local regular_range = ability:GetLevelSpecialValueFor("regular_range", ability_level)
	local cast_distance = ( target:GetAbsOrigin() - caster:GetAbsOrigin() ):Length2D()

	-- Check if the target can be assassinated, if not, stop casting and move closer
	if cast_distance > regular_range and not target:HasModifier(modifier_shrapnel) then

		-- Start moving
		caster:MoveToPosition(target:GetAbsOrigin())
		Timers:CreateTimer(0.1, function()

			-- Update distance between caster and target
			cast_distance = ( target:GetAbsOrigin() - caster:GetAbsOrigin() ):Length2D()

			-- If it's not a legal cast situation and no other order was given, keep moving
			if cast_distance > regular_range and not target:HasModifier(modifier_shrapnel) and not caster.stop_assassinate_cast then
				return 0.1

			-- If another order was given, stop tracking the cast distance
			elseif caster.stop_assassinate_cast then
				caster:RemoveModifierByName(modifier_cast_check)
				caster.stop_assassinate_cast = nil

			-- If all conditions are met, cast Assassinate again
			else
				caster:CastAbilityOnTarget(target, ability, caster:GetPlayerID())
			end
		end)
		return nil
	end

	-- Play the pre-cast sound
	caster:EmitSound("Ability.AssassinateLoad")

	-- Mark the target with the crosshair
	ability:ApplyDataDrivenModifier(caster, target, modifier_target, {})

	-- Apply the caster modifiers
	ability:ApplyDataDrivenModifier(caster, caster, modifier_caster, {})
	caster:RemoveModifierByName(modifier_cast_check)

	-- Memorize the target
	caster.assassinate_target = target
end

function AssassinateCastCheck( keys )
	local caster = keys.caster
	caster.stop_assassinate_cast = true
end

function AssassinateStop( keys )
	local caster = keys.caster
	local target_modifier = keys.target_modifier
	caster.assassinate_target:RemoveModifierByName(target_modifier)
	caster.assassinate_target = nil
end

function AssassinateParticleStart( keys )
	local caster = keys.caster
	local target = keys.target
	local particle_debuff = keys.particle_debuff
	
	-- Create the crosshair particle
	target.assassinate_crosshair_pfx = ParticleManager:CreateParticleForTeam(particle_debuff, PATTACH_OVERHEAD_FOLLOW, target, caster:GetTeam())
	ParticleManager:SetParticleControl(target.assassinate_crosshair_pfx, 0, target:GetAbsOrigin())
end

function AssassinateParticleEnd( keys )
	local target = keys.target
	
	-- Destroy the crosshair particle
	ParticleManager:DestroyParticle(target.assassinate_crosshair_pfx, true)
	ParticleManager:ReleaseParticleIndex(target.assassinate_crosshair_pfx)
	target.assassinate_crosshair_pfx = nil
end

function Assassinate( keys )
	local caster = keys.caster
	local target = keys.target
	local ability = keys.ability
	local ability_level = ability:GetLevel() - 1

	-- Parameters
	local bullet_duration = ability:GetLevelSpecialValueFor("projectile_travel_time", ability_level)
	local spill_range = ability:GetLevelSpecialValueFor("spill_range", ability_level)
	local bullet_radius = ability:GetLevelSpecialValueFor("aoe_size", ability_level)
	local bullet_direction = ( target:GetAbsOrigin() - caster:GetAbsOrigin() ):Normalized()
	bullet_direction = Vector(bullet_direction.x, bullet_direction.y, 0)
	local bullet_distance = ( target:GetAbsOrigin() - caster:GetAbsOrigin() ):Length2D() + spill_range
	local bullet_speed = bullet_distance / bullet_duration

	-- Create the real, invisible projectile
	local assassinate_projectile = {
		Ability				= ability,
		EffectName			= "",
		vSpawnOrigin		= caster:GetAbsOrigin(),
		fDistance			= bullet_distance,
		fStartRadius		= bullet_radius,
		fEndRadius			= bullet_radius,
		Source				= caster,
		bHasFrontalCone		= false,
		bReplaceExisting	= false,
		iUnitTargetTeam		= DOTA_UNIT_TARGET_TEAM_ENEMY,
		iUnitTargetFlags	= DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES,
		iUnitTargetType		= DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_CREEP,
	--	fExpireTime			= ,
		bDeleteOnHit		= false,
		vVelocity			= bullet_direction * bullet_speed,
		bProvidesVision		= false,
	--	iVisionRadius		= ,
	--	iVisionTeamNumber	= caster:GetTeamNumber(),
	}

	ProjectileManager:CreateLinearProjectile(assassinate_projectile)

	-- Create the fake, visible projectile
	assassinate_projectile = {
		Target = target,
		Source = caster,
		Ability = nil,	
		EffectName = "particles/units/heroes/hero_sniper/sniper_assassinate.vpcf",
		vSpawnOrigin = caster:GetAbsOrigin(),
		bHasFrontalCone = false,
		bReplaceExisting = false,
		iUnitTargetTeam = DOTA_UNIT_TARGET_TEAM_ENEMY,
		iUnitTargetFlags = DOTA_UNIT_TARGET_FLAG_MAGIC_IMMUNE_ENEMIES,
		iUnitTargetType = DOTA_UNIT_TARGET_HERO + DOTA_UNIT_TARGET_BASIC,
		bDeleteOnHit = true,
		iMoveSpeed = bullet_speed,
		bProvidesVision = false,
		bDodgeable = true,
		iSourceAttachment = DOTA_PROJECTILE_ATTACHMENT_HITLOCATION
	}

	ProjectileManager:CreateTrackingProjectile(assassinate_projectile)
end

function AssassinateHit( keys )
	local caster = keys.caster
	local target = keys.target
	local ability = keys.ability
	local ability_level = ability:GetLevel() - 1
	local scepter = HasScepter(caster)
	local modifier_slow = keys.modifier_slow

	-- Parameters
	local basedamage = ability:GetLevelSpecialValueFor("damage", ability_level)
	local modifierStackName = "modifier_truered_count"
	local modifierName
	local Stacktruered = ability:GetLevelSpecialValueFor("truereddamage", ability_level)
	local Stacktruedelete = ability:GetLevelSpecialValueFor("truereddelete", ability_level)
	local stacksceng = modifierStackName:GetStackCount()
	local stackstrue = stacksceng - Stacktruedelete
	local stacksadd = stackstrue * Stacktruered 
	local damage = basedamage + stacksadd

	-- Play sound
	target:EmitSound("Hero_Sniper.AssassinateDamage")

	-- Scepter damage and debuff
	if scepter then

		-- Scepter parameters
		damage = ability:GetLevelSpecialValueFor("damage_scepter", ability_level)
		local knockback_speed = ability:GetLevelSpecialValueFor("knockback_speed_scepter", ability_level)
		local knockback_distance = ability:GetLevelSpecialValueFor("knockback_dist_scepter", ability_level)
		local caster_pos = caster:GetAbsOrigin()

		-- Knockback parameters
		local assassinate_knockback =	{
			should_stun = 1,
			knockback_duration = math.min( knockback_distance / knockback_speed, 0.6),
			duration = math.min( knockback_distance / knockback_speed, 0.6),
			knockback_distance = knockback_distance,
			knockback_height = 200,
			center_x = caster_pos.x,
			center_y = caster_pos.y,
			center_z = caster_pos.z
		}

		-- Apply knockback and slow modifiers
		target:RemoveModifierByName("modifier_knockback")
		target:AddNewModifier(caster, ability, "modifier_knockback", assassinate_knockback )
		ability:ApplyDataDrivenModifier(caster, target, modifier_slow, {})
	end

	-- Apply damage
	ApplyDamage({attacker = caster, victim = target, ability = ability, damage = damage, damage_type = DAMAGE_TYPE_MAGICAL})

	-- Grant short-lived vision
	ability:CreateVisibilityNode(target:GetAbsOrigin(), 500, 1.0)

	-- Ministun
	target:AddNewModifier(caster, ability, "modifier_stunned", {duration = 0.1})

	-- Fire particle
	local hit_fx = ParticleManager:CreateParticle("particles/econ/items/gyrocopter/hero_gyrocopter_gyrotechnics/gyro_guided_missile_death.vpcf", PATTACH_ABSORIGIN_FOLLOW, target)
	ParticleManager:SetParticleControl(hit_fx, 0, target:GetAbsOrigin() )
end

function DoHealthCost( event )
    -- Variables
    local caster = event.caster
    local ability = event.ability
    local health_cost = ability:GetLevelSpecialValueFor( "health_cost" , ability:GetLevel() - 1  )
    local health = caster:GetHealth()
    local new_health = (health - health_cost)

    -- "do damage"
    -- aka set the casters HP to the new value
    -- ModifyHealth's third parameter lets us decide if the healthcost should be lethal
    caster:ModifyHealth(new_health, ability, false, 0)
end
function WhirlingAxesRanged( keys )
	local caster = keys.caster
	local caster_location = caster:GetAbsOrigin()
	local target_point = keys.target_points[1]
	local ability = keys.ability
	local ability_level = ability:GetLevel() - 1

	-- Ability variables
	local axe_width = ability:GetLevelSpecialValueFor("axe_width", ability_level) 
	local axe_speed = ability:GetLevelSpecialValueFor("axe_speed", ability_level) 
	local axe_range = ability:GetLevelSpecialValueFor("axe_range", ability_level) 
	local axe_spread = ability:GetLevelSpecialValueFor("axe_spread", ability_level) 
	local axe_count = ability:GetLevelSpecialValueFor("axe_count", ability_level)
	local axe_projectile = keys.axe_projectile
	caster.whirling_axes_ranged_hit_table = {}

	-- Vision
	local vision_radius = ability:GetLevelSpecialValueFor("vision_radius", ability_level)

	-- Initial angle calculation
	local angle = axe_spread / axe_count -- The angle between the axes
	local direction = (target_point - caster_location):Normalized()
	local axe_angle_count = math.floor(axe_count / 2) -- Number of axes for each direction
	local angle_left = QAngle(0, angle, 0) -- Rotation angle to the left
	local angle_right = QAngle(0, -angle, 0) -- Rotation angle to the right

	-- Check if its an uneven number of axes
	-- If it is then create the middle axe
	if axe_count % 2 ~= 0 then
		local projectileTable =
		{
			EffectName = axe_projectile,
			Ability = ability,
			vSpawnOrigin = caster_location,
			vVelocity = direction * axe_speed,
			fDistance = axe_range,
			fStartRadius = axe_width,
			fEndRadius = axe_width,
			Source = caster,
			bHasFrontalCone = false,
			bReplaceExisting = false,
			iUnitTargetTeam = ability:GetAbilityTargetTeam(),
			iUnitTargetFlags = DOTA_UNIT_TARGET_FLAG_NONE,
			iUnitTargetType = ability:GetAbilityTargetType(),
			bProvidesVision = true,
			iVisionRadius = vision_radius,
			iVisionTeamNumber = caster:GetTeamNumber()
		}
		ProjectileManager:CreateLinearProjectile(projectileTable)
	end

	local new_angle = QAngle(0,0,0) -- Rotation angle

	-- Create axes that spread to the right
	for i = 1, axe_angle_count do
		-- Angle calculation		
		new_angle.y = angle_right.y * i

		-- Calculate the new position after applying the angle and then get the direction of it			
		local position = RotatePosition(caster_location, new_angle, target_point)	
		local position_direction = (position - caster_location):Normalized()

		-- Create the axe projectile
		local projectileTable =
		{
			EffectName = axe_projectile,
			Ability = ability,
			vSpawnOrigin = caster_location,
			vVelocity = position_direction * axe_speed,
			fDistance = axe_range,
			fStartRadius = axe_width,
			fEndRadius = axe_width,
			Source = caster,
			bHasFrontalCone = false,
			bReplaceExisting = false,
			iUnitTargetTeam = ability:GetAbilityTargetTeam(),
			iUnitTargetFlags = DOTA_UNIT_TARGET_FLAG_NONE,
			iUnitTargetType = ability:GetAbilityTargetType(),
			bProvidesVision = true,
			iVisionRadius = vision_radius,
			iVisionTeamNumber = caster:GetTeamNumber()
		}
		ProjectileManager:CreateLinearProjectile(projectileTable)
	end

	-- Create axes that spread to the left
	for i = 1, axe_angle_count do
		-- Angle calculation
		new_angle.y = angle_left.y * i

		-- Calculate the new position after applying the angle and then get the direction of it	
		local position = RotatePosition(caster_location, new_angle, target_point)	
		local position_direction = (position - caster_location):Normalized()

		-- Create the axe projectile
		local projectileTable =
		{
			EffectName = axe_projectile,
			Ability = ability,
			vSpawnOrigin = caster_location,
			vVelocity = position_direction * axe_speed,
			fDistance = axe_range,
			fStartRadius = axe_width,
			fEndRadius = axe_width,
			Source = caster,
			bHasFrontalCone = false,
			bReplaceExisting = false,
			iUnitTargetTeam = ability:GetAbilityTargetTeam(),
			iUnitTargetFlags = DOTA_UNIT_TARGET_FLAG_NONE,
			iUnitTargetType = ability:GetAbilityTargetType(),
			bProvidesVision = true,
			iVisionRadius = vision_radius,
			iVisionTeamNumber = caster:GetTeamNumber()
		}
		ProjectileManager:CreateLinearProjectile(projectileTable)
	end
end


--[[Author: Pizzalol
	Date: 18.03.2015.
	Checks if the target has been hit before and then does logic according to that]]
function WhirlingAxesRangedHit( keys )
	local caster = keys.caster
	local target = keys.target
	local ability = keys.ability
	local ability_level = ability:GetLevel() - 1
	local sound = keys.sound

	local axe_damage = ability:GetLevelSpecialValueFor("axe_damage", ability_level)

	-- Check if the target has been hit before
	local hit_check = false

	for _,unit in ipairs(caster.whirling_axes_ranged_hit_table) do
		if unit == target then
			hit_check = true
			break
		end
	end

	-- If the target hasnt been hit before then insert it into the hit table to keep track of it
	if not hit_check then
		table.insert(caster.whirling_axes_ranged_hit_table, target)

		-- Play the sound
		EmitSoundOn(sound, target)

		-- Initialize the damage table and deal damage to the target
		local damage_table = {}
		damage_table.attacker = caster
		damage_table.victim = target
		damage_table.ability = ability
		damage_table.damage_type = ability:GetAbilityDamageType() 
		damage_table.damage = axe_damage

		ApplyDamage(damage_table)
	end
end